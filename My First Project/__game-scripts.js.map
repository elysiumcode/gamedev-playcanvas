{"version":3,"sources":["scripts/follow.js","scripts/movement.js","scripts/teleportable.js","scripts/teleport.js"],"names":[],"mappings":"AACA,IAAI,OAAS,GAAG,aAAa,UAE7B,OAAO,WAAW,IAAI,SAAU,CAC5B,KAAM,SACN,MAAO,SACP,YAAa,yBAGjB,OAAO,WAAW,IAAI,WAAY,CAC9B,KAAM,SACN,QAAS,EACT,MAAO,WACP,YAAa,mDAIjB,OAAO,UAAU,WAAa,WAC1B,KAAK,IAAM,IAAI,GAAG,MAItB,OAAO,UAAU,OAAS,SAAS,GAC/B,GAAK,KAAK,OAAV,CAGA,IAAI,EAAM,KAAK,OAAO,cAGtB,EAAI,GAAK,IAAO,KAAK,SACrB,EAAI,GAAK,EAAM,KAAK,SACpB,EAAI,GAAK,IAAO,KAAK,SAGrB,KAAK,IAAI,KAAK,KAAK,IAAK,EAAK,IAG7B,KAAK,OAAO,YAAY,KAAK,OCpCjC,IAAI,SAAW,GAAG,aAAa,YAE/B,SAAS,WAAW,IAAI,QAAS,CAC7B,KAAM,SACN,QAAS,GACT,IAAK,IACL,IAAK,GACL,UAAW,EACX,YAAa,gCAIjB,SAAS,UAAU,WAAa,WAC5B,KAAK,MAAQ,IAAI,GAAG,MAIxB,SAAS,UAAU,OAAS,SAAS,GACjC,IAAI,EAAS,EACT,EAAS,EAuBb,GApBI,KAAK,IAAI,SAAS,UAAU,GAAG,YAC/B,GAAU,KAAK,OAGf,KAAK,IAAI,SAAS,UAAU,GAAG,aAC/B,GAAU,KAAK,OAGf,KAAK,IAAI,SAAS,UAAU,GAAG,UAC/B,GAAU,KAAK,OAGf,KAAK,IAAI,SAAS,UAAU,GAAG,YAC/B,GAAU,KAAK,OAGnB,KAAK,MAAM,EAAI,EACf,KAAK,MAAM,EAAI,EAGX,KAAK,MAAM,SAAU,CAGrB,IAAI,EAAK,KAAK,IAAe,KAAV,KAAK,IACpB,EAAK,KAAK,IAAe,KAAV,KAAK,IACxB,KAAK,MAAM,IAAI,KAAK,MAAM,EAAI,EAAK,KAAK,MAAM,EAAI,EAAI,EAAG,KAAK,MAAM,EAAI,EAAK,KAAK,MAAM,EAAI,GAGxF,KAAK,MAAM,SAAW,KAAK,OAC3B,KAAK,MAAM,YAAY,MAAM,KAAK,OAK1C,KAAK,OAAO,UAAU,aAAa,KAAK,QCxD5C,IAAI,aAAe,GAAG,aAAa,gBAGnC,aAAa,UAAU,WAAa,WAChC,KAAK,iBAAmB,KACxB,KAAK,eAAiB,KACtB,KAAK,aAAe,KAAK,MACzB,KAAK,cAAgB,KAAK,OAAO,cAAc,SAInD,aAAa,UAAU,OAAS,SAAS,GAG3B,KAAK,OAAO,cACd,EAAI,GACR,KAAK,SAAS,KAAK,iBAAkB,KAAK,iBAKlD,aAAa,UAAU,SAAW,SAAS,EAAM,GAa7C,IAAI,EAXA,GAAS,KAAK,MAAQ,KAAK,aAAgB,MAI/C,KAAK,aAAe,KAAK,MAGzB,KAAK,iBAAmB,EACxB,KAAK,eAAiB,EAKlB,GAEA,EAAW,EAAG,eAEL,GAAK,GAGd,EAAW,KAAK,cAIpB,KAAK,OAAO,UAAU,SAAS,GAE/B,KAAK,OAAO,UAAU,eAAiB,GAAG,KAAK,KAC/C,KAAK,OAAO,UAAU,gBAAkB,GAAG,KAAK,OClDpD,IAAI,SAAW,GAAG,aAAa,YAE/B,SAAS,WAAW,IAAI,SAAU,CAC9B,KAAM,SACN,MAAO,gBACP,YAAa,qDAIjB,SAAS,UAAU,WAAa,WACxB,KAAK,QAGL,KAAK,OAAO,UAAU,GAAG,eAAgB,KAAK,eAAgB,OAItE,SAAS,UAAU,eAAiB,SAAU,GAEpC,EAAY,OAAO,cAIzB,EAAY,OAAO,aAAa,SAAS,KAAK,OAAQ,KAAK","sourcesContent":["// follow.js\nvar Follow = pc.createScript('follow');\n\nFollow.attributes.add('target', {\n    type: 'entity',\n    title: 'Target',\n    description: 'The Entity to follow'\n});\n\nFollow.attributes.add('distance', {\n    type: 'number',\n    default: 4,\n    title: 'Distance',\n    description: 'How far from the Entity should the follower be'\n});\n\n// initialize code called once per entity\nFollow.prototype.initialize = function() {\n    this.vec = new pc.Vec3();\n};\n\n// update code called every frame\nFollow.prototype.update = function(dt) {\n    if (!this.target) return;\n\n    // get the position of the target entity\n    var pos = this.target.getPosition();\n\n    // calculate the desired position for this entity\n    pos.x += 0.75 * this.distance;\n    pos.y += 1.0 * this.distance;\n    pos.z += 0.75 * this.distance;\n\n    // smoothly interpolate towards the target position\n    this.vec.lerp(this.vec, pos, 0.1);\n\n    // set the position for this entity\n    this.entity.setPosition(this.vec); \n};\n\n\n","// movement.js\nvar Movement = pc.createScript('movement');\n\nMovement.attributes.add('speed', {\n    type: 'number',    \n    default: 0.1,\n    min: 0.05,\n    max: 0.5,\n    precision: 2,\n    description: 'Controls the movement speed'\n});\n\n// initialize code called once per entity\nMovement.prototype.initialize = function() {\n    this.force = new pc.Vec3();\n};\n\n// update code called every frame\nMovement.prototype.update = function(dt) {\n    var forceX = 0;\n    var forceZ = 0;\n\n    // calculate force based on pressed keys\n    if (this.app.keyboard.isPressed(pc.KEY_LEFT)) {\n        forceX = -this.speed;\n    } \n\n    if (this.app.keyboard.isPressed(pc.KEY_RIGHT)) {\n        forceX += this.speed;\n    }\n\n    if (this.app.keyboard.isPressed(pc.KEY_UP)) {\n        forceZ = -this.speed;\n    } \n\n    if (this.app.keyboard.isPressed(pc.KEY_DOWN)) {\n        forceZ += this.speed;\n    }\n\n    this.force.x = forceX;\n    this.force.z = forceZ;\n\n    // if we have some non-zero force\n    if (this.force.length()) {\n\n        // calculate force vector\n        var rX = Math.cos(-Math.PI * 0.25);\n        var rY = Math.sin(-Math.PI * 0.25);\n        this.force.set(this.force.x * rX - this.force.z * rY, 0, this.force.z * rX + this.force.x * rY);\n\n        // clamp force to the speed\n        if (this.force.length() > this.speed) {\n            this.force.normalize().scale(this.speed);\n        }\n    }\n\n    // apply impulse to move the entity\n    this.entity.rigidbody.applyImpulse(this.force);\n};\n\n\n","// teleportable.js\nvar Teleportable = pc.createScript('teleportable');\n\n// initialize code called once per entity\nTeleportable.prototype.initialize = function() {\n    this.lastTeleportFrom = null;\n    this.lastTeleportTo = null;\n    this.lastTeleport = Date.now(); \n    this.startPosition = this.entity.getPosition().clone();       \n};\n\n// update code called every frame\nTeleportable.prototype.update = function(dt) {\n    // Make sure we don't fall over. If we do then\n    // teleport to the last location\n    var pos = this.entity.getPosition();\n    if (pos.y < 0) {\n        this.teleport(this.lastTeleportFrom, this.lastTeleportTo);\n    }\n};\n\n\nTeleportable.prototype.teleport = function(from, to) {\n    // can't teleport too often (500ms)\n    if (from && (Date.now() - this.lastTeleport) < 500)\n        return;\n\n    // set new teleport time\n    this.lastTeleport = Date.now();\n\n    // set last teleport targets\n    this.lastTeleportFrom = from;\n    this.lastTeleportTo = to;\n\n    // position to teleport to\n    var position;\n\n    if (to) {\n        // from target\n        position = to.getPosition();\n        // move a bit higher\n        position.y += 0.5;\n    } else {\n        // to respawn location\n        position = this.startPosition;\n    }\n\n    // move ball to that point\n    this.entity.rigidbody.teleport(position);\n    // need to reset angular and linear forces\n    this.entity.rigidbody.linearVelocity = pc.Vec3.ZERO;\n    this.entity.rigidbody.angularVelocity = pc.Vec3.ZERO;            \n};\n\n\n","// teleport.js\nvar Teleport = pc.createScript('teleport');\n\nTeleport.attributes.add('target', {\n    type: 'entity',\n    title: 'Target Entity',\n    description: 'The target entity where we are going to teleport'\n});\n\n// initialize code called once per entity\nTeleport.prototype.initialize = function() {\n    if (this.target) {\n        // Subscribe to the triggerenter event of this entity's collision component.\n        // This will be fired when a rigid body enters this collision volume.\n        this.entity.collision.on('triggerenter', this.onTriggerEnter, this);\n    }\n};\n\nTeleport.prototype.onTriggerEnter = function (otherEntity) {\n    // it is not teleportable\n    if (! otherEntity.script.teleportable)\n        return;\n\n    // teleport entity to the target entity\n    otherEntity.script.teleportable.teleport(this.entity, this.target);\n};\n\n\n"]}